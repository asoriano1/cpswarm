<?xml version="1.0"?>
<launch>
	
	  <arg name="base"      value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->
	  <arg name="battery"   value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 --> 
	  <arg name="gui" default="true"/>
	  <arg name="stacks"    value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons --> 
      <arg name="3d_sensor" value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro --> 
      <arg name="top_plate_device"  default="$(optenv TURTLEBOT_TOP_PLATE_DEVICE)" doc="top plate devices types [rplidar, widowx, reactor_no_wrist, reactor_wrist, pincher, urg04lx, notop]"/>
  <arg name="simulation"        default="$(env TURTLEBOT_SIMULATION)"   doc="set flags to indicate this turtle is run in simulation mode."/>
  <arg name="serialport"        default="$(env TURTLEBOT_SERIAL_PORT)"  doc="used by create to configure the port it is connected on [/dev/ttyUSB0, /dev/ttyS0]"/>
 
  <arg name="robot_a" value="turtle_a"/>
  

    <arg name="visual" default="true" />
    <param name="use_sim_time"  value="true"/>
    
    <!-- emergency_exit: the emergency exit simulation -->
    <!--node name="emergency_exit" pkg="emergency_exit" type="emergency_exit" output="screen" required="true">
        <rosparam file="$(find emergency_exit)/config/emergency_exit.yaml" command="load" />
        <rosparam file="$(find emergency_exit)/config/frevo.yaml" command="load" />
        <rosparam file="$(find emergency_exit)/world/small_maze.yaml" command="load" />
    </node-->
    
    <!-- stage: the simulator -->
    <!-- aquÃ­ es donde instancia el mapa, el agente, etc-->
    <!--node if="$(arg visual)" name="stage" pkg="stage_ros" type="stageros" args="$(find emergency_exit)/world/small_maze.world" required="true" />
    <node unless="$(arg visual)" name="stage" pkg="stage_ros" type="stageros" args="-g $(find emergency_exit)/world/small_maze.world" required="true" /-->
    
    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<!--arg name="world_name" default="$(find kuka_kr120_support)/worlds/scenario_210x796.world"/-->
		<!--arg name="world_name" default="$(find emergency_exit)/world/small_maze.world"/-->
		<arg name="world_name" value="$(find emergency_exit)/world/small_exit0.world"/>
		<arg name="debug" value="false" />
		<arg name="gui" value="true" />
		<arg name="paused" value="false"/>
		<arg name="use_sim_time" value="true"/>
		<arg name="headless" value="false"/>
		<arg name="physics" value="ode"/>
	</include>
	
		  <!-- Gazebo model spawner -->
	<!--node name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"
		args="$(optenv ROBOT_INITIAL_POSE) -x 0 -y -1 -Y 1.57079 -unpause -urdf -param robot_description -model mobile_base_a"/-->


    <!-- map server: provides the map -->
    <!--node pkg="map_server" type="map_server" name="map_server" args="$(find emergency_exit)/world/small_maze.yaml" required="true" /-->
    

    <!-- fake_localization: localizes the robot in the map -->
    <!--node pkg="fake_localization" type="fake_localization" name="fake_localization" required="true" /-->
    
    
    <group ns="$(arg robot_a)">
	 
		<arg name="prefix_frame" value="$(arg robot_a)_"/>

		<include file="$(find turtlebot_bringup)/launch/includes/robot.launch.xml">
			<arg name="base" value="$(arg base)" />
			<arg name="stacks" value="$(arg stacks)" />
			<arg name="3d_sensor" value="$(arg 3d_sensor)" />
			<arg name="top_plate_device" value="$(arg top_plate_device)" />
			<arg name="prefix_frame" value="$(arg prefix_frame)"/>
		</include>
		 
		  <!-- Gazebo model spawner -->
		<node name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"
				args="$(optenv ROBOT_INITIAL_POSE) -x 0 -y -1 -Y 1.57079 -unpause -urdf -param robot_description -model mobile_base_a"/>

		
		<!-- map_server, amcl and move_base-->
		<include file="$(find turtlebot_navigation)/launch/amcl_demo_multi.launch">
			<arg name="prefix_frame" value="$(arg prefix_frame)"/>		
			<!--arg name="initial_pose_x" value="0.0"/> <!- - Use 17.0 for willow's map in simulation -->
			<!--arg name="initial_pose_y" value="-1.0"/> <!- - Use 17.0 for willow's map in simulation -->
		</include>		
  
	</group>
	
    
    
</launch>

